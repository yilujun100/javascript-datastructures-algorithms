{"version":3,"sources":["webpack://DataStructuresAlgorithms/./src/js/data-structures/deque.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/queue.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/stack-array.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/stack.js","webpack://DataStructuresAlgorithms/./src/js/index.js","webpack://DataStructuresAlgorithms/./src/js/others/base-converter.js","webpack://DataStructuresAlgorithms/./src/js/others/hot-potato.js","webpack://DataStructuresAlgorithms/./src/js/others/palindrome-checker.js","webpack://DataStructuresAlgorithms/webpack/bootstrap","webpack://DataStructuresAlgorithms/webpack/startup"],"names":["Deque","this","head","tail","items","addFront","element","isEmpty","addBack","i","removeFront","undefined","result","removeBack","peekFront","peekBack","size","clear","toString","objString","Queue","enqueue","dequeue","peek","StackArray","push","pop","length","toArray","Stack","count","default","decimalToBinary","hotPotato","palindromeChecker","decNumber","remStack","number","rem","binaryString","Math","floor","elementList","num","queue","eliminatedList","eliminated","winner","aString","deque","lowerString","toLocaleLowerCase","split","join","firstChar","lastChar","charAt","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"mappings":"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","file":"DataStructuresAlgorithms.min.js","sourcesContent":["/**\r\n * 双端队列（deque, 或称double-ended queue）是一种允许我们同时从队首和队尾添加和删除元素的特殊队列\r\n */\r\n\r\nexport default class Deque {\r\n    constructor() {\r\n        this.head = 0;\r\n        this.tail = 0;\r\n        this.items = {};\r\n    }\r\n\r\n    // 向双端队列头部添加元素\r\n    addFront(element) {\r\n        if (this.isEmpty()) {\r\n            this.addBack(element);\r\n        } else if (this.head > 0) {\r\n            this.head--;\r\n            this.items[this.head] = element;\r\n        } else {\r\n            for (let i = this.tail; i > 0; i--) {\r\n                this.items[i] = this.items[i - 1];\r\n            }\r\n        }\r\n    }\r\n\r\n    // 向双端队列尾部添加元素\r\n    addBack(element) {\r\n        this.items[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    // 向双端队列头部移除元素\r\n    removeFront() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        const result = this.items[this.head];\r\n        delete this.items[this.head];\r\n        this.head++;\r\n        return result;\r\n    }\r\n\r\n    // 向双端队列尾部移除元素\r\n    removeBack() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        this.tail--;\r\n        const result = this.items[this.tail];\r\n        delete this.items[this.tail];\r\n        return result;\r\n    }\r\n\r\n    peekFront() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.head];\r\n    }\r\n\r\n    peekBack() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.tail - 1];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.items = {};\r\n        this.head = 0;\r\n        this.tail = 0;\r\n    }\r\n\r\n    size() {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[this.head]}`;\r\n        for (let i = this.head + 1; i < this.tail; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","// @ts-check\r\n\r\nexport default class Queue {\r\n    constructor() {\r\n        this.head = 0; // 队列的头指针\r\n        this.tail = 0; // 队列的尾指针，通常情况下指向队列最后一个元素的下一位\r\n        this.items = {};\r\n    }\r\n\r\n    // 入队\r\n    enqueue(element) {\r\n        this.items[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    // 出队\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        const result = this.items[this.head];\r\n        delete this.items[this.head];\r\n        this.head++;\r\n        return result;\r\n    }\r\n\r\n    // 查看队首元素\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.head];\r\n    }\r\n\r\n    // 判空\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    // 清空\r\n    clear() {\r\n        this.items = {};\r\n        this.head = 0;\r\n        this.tail = 0;\r\n    }\r\n\r\n    // 队列元素个数\r\n    size() {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[this.head]}`;\r\n        for (let i = this.head + 1; i < this.tail; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","// @ts-check\r\n\r\n// 基于数组的栈\r\nexport default class StackArray {\r\n    constructor() {\r\n        this.items = []; // 使用数组来保存栈里的元素\r\n    }\r\n\r\n    push(element) { // 向栈添加元素\r\n        this.items.push(element);\r\n    }\r\n\r\n    pop() { // 从栈移除元素\r\n        return this.items.pop();\r\n    }\r\n\r\n    peek() { // 查看栈顶元素\r\n        return this.items[this.items.length - 1];\r\n    }\r\n\r\n    isEmpty() { // 检查栈是否为空\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    size() { // 返回栈里的所有元素\r\n        return this.items.length;\r\n    }\r\n\r\n    clear() { // 清空栈元素\r\n        this.items = [];\r\n    }\r\n\r\n    toArray() {\r\n        return this.items;\r\n    }\r\n\r\n    toString() { // 打印栈内容\r\n        return this.items.toString();\r\n    }\r\n}\r\n","// @ts-check\r\n\r\n// 创建一个基于JavaScript对象的Stack类\r\nexport default class Stack {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.items = {};\r\n    }\r\n\r\n    push(element) {\r\n        this.items[this.count] = element;\r\n        this.count++;\r\n    }\r\n\r\n    pop() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        this.count--;\r\n        const result = this.items[this.count];\r\n        delete this.items[this.count]\r\n        return result;\r\n    }\r\n\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.count - 1];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.count === 0;\r\n    }\r\n\r\n    size() {\r\n        return this.count;\r\n    }\r\n\r\n    clear() {\r\n        /* while (!this.isEmpty()) {\r\n            this.pop();\r\n        } */\r\n        this.items = {};\r\n        this.count = 0;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[0]}`;\r\n        for (let i = 1; i < this.count; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","// chapter 04\nexport { default as StackArray } from './data-structures/stack-array';\nexport { default as Stack } from './data-structures/stack';\nexport { decimalToBinary } from './others/base-converter';\n\n// chapter 05\nexport { default as Queue } from './data-structures/queue';\nexport { default as Deque } from './data-structures/deque';\nexport { hotPotato } from './others/hot-potato';\nexport { palindromeChecker } from './others/palindrome-checker';\n","// @ts-check\r\n\r\nimport Stack from '../data-structures/stack-array';\r\n\r\n// 十进制转二进制\r\nexport function decimalToBinary(decNumber) {\r\n    const remStack = new Stack(); // remStack用来存储余数\r\n    let number = decNumber;\r\n    let rem;\r\n    let binaryString = ''; // 最终返回的二进制字符串\r\n\r\n    // 当除法运算的结果不为0时，我们会得到一个余数，并压入栈中。然后让结果继续除以2\r\n    while (number > 0) {\r\n        rem = Math.floor(number % 2);\r\n        remStack.push(rem);\r\n        number = Math.floor(number / 2);\r\n    }\r\n\r\n    // 将栈中元素依次弹栈，并输出\r\n    while (!remStack.isEmpty()) {\r\n        binaryString += remStack.pop().toString();\r\n    }\r\n\r\n    return binaryString;\r\n}\r\n","import Queue from '../data-structures/queue';\n\n/**\n * 循环队列——模拟击鼓传花游戏\n * @param {*} elementList 人员列表\n * @param {*} num 传递次数\n */\nexport function hotPotato(elementList, num) {\n    const queue = new Queue();\n    const eliminatedList = []; // 存储被淘汰的人员\n    // 依次入队elementList\n    for (let i = 0; i < elementList.length; i++) {\n        queue.enqueue(elementList[i]);\n    }\n\n    while (queue.size() > 1) {\n        for (let i = 0; i < num; i++) {\n            queue.enqueue(queue.dequeue());\n        }\n        eliminatedList.push(queue.dequeue());\n    }\n\n    return {\n        eliminated: eliminatedList,\n        winner: queue.dequeue()\n    };\n}\n","/**\n * 回文检查器\n */\n\nimport Deque from '../data-structures/deque';\n\nexport function palindromeChecker(aString) {\n    if (aString === undefined || aString === null || (aString !== null && aString.length === 0)) {\n        return false;\n    }\n    const deque = new Deque();\n    const lowerString = aString.toLocaleLowerCase().split(' ').join('');\n    let firstChar;\n    let lastChar;\n\n    for (let i = 0; i < lowerString.length; i++) {\n        deque.addBack(lowerString.charAt(i));\n    }\n\n    while (deque.size() > 1) {\n        firstChar = deque.removeFront();\n        lastChar = deque.removeBack();\n        if (firstChar !== lastChar) {\n            return false;\n        }\n    }\n    return true;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(126);\n"],"sourceRoot":""}