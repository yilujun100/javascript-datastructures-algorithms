{"version":3,"sources":["webpack://DataStructuresAlgorithms/./src/js/data-structures/deque.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/doubly-linked-list.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/linked-list.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/models/linked-list-models.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/queue.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/stack-array.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/stack.js","webpack://DataStructuresAlgorithms/./src/js/index.js","webpack://DataStructuresAlgorithms/./src/js/others/base-converter.js","webpack://DataStructuresAlgorithms/./src/js/others/hot-potato.js","webpack://DataStructuresAlgorithms/./src/js/others/palindrome-checker.js","webpack://DataStructuresAlgorithms/./src/js/util.js","webpack://DataStructuresAlgorithms/webpack/bootstrap","webpack://DataStructuresAlgorithms/webpack/startup"],"names":["Deque","this","head","tail","items","addFront","element","isEmpty","addBack","i","removeFront","undefined","result","removeBack","peekFront","peekBack","size","clear","toString","objString","DoublyLinkedList","equalsFn","defaultEquals","push","node","DoublyNode","next","prev","count","insert","index","current","previous","getElementAt","removeAt","indexOf","getHead","getTail","inverseToString","LinkedList","Node","remove","Queue","enqueue","dequeue","peek","StackArray","pop","length","toArray","Stack","default","decimalToBinary","hotPotato","palindromeChecker","decNumber","remStack","number","rem","binaryString","Math","floor","elementList","num","queue","eliminatedList","eliminated","winner","aString","deque","lowerString","toLocaleLowerCase","split","join","firstChar","lastChar","charAt","a","b","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"mappings":"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","file":"DataStructuresAlgorithms.min.js","sourcesContent":["/**\r\n * 双端队列（deque, 或称double-ended queue）是一种允许我们同时从队首和队尾添加和删除元素的特殊队列\r\n */\r\n\r\nexport default class Deque {\r\n    constructor() {\r\n        this.head = 0;\r\n        this.tail = 0;\r\n        this.items = {};\r\n    }\r\n\r\n    // 向双端队列头部添加元素\r\n    addFront(element) {\r\n        if (this.isEmpty()) {\r\n            this.addBack(element);\r\n        } else if (this.head > 0) {\r\n            this.head--;\r\n            this.items[this.head] = element;\r\n        } else {\r\n            for (let i = this.tail; i > 0; i--) {\r\n                this.items[i] = this.items[i - 1];\r\n            }\r\n        }\r\n    }\r\n\r\n    // 向双端队列尾部添加元素\r\n    addBack(element) {\r\n        this.items[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    // 向双端队列头部移除元素\r\n    removeFront() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        const result = this.items[this.head];\r\n        delete this.items[this.head];\r\n        this.head++;\r\n        return result;\r\n    }\r\n\r\n    // 向双端队列尾部移除元素\r\n    removeBack() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        this.tail--;\r\n        const result = this.items[this.tail];\r\n        delete this.items[this.tail];\r\n        return result;\r\n    }\r\n\r\n    peekFront() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.head];\r\n    }\r\n\r\n    peekBack() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.tail - 1];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.items = {};\r\n        this.head = 0;\r\n        this.tail = 0;\r\n    }\r\n\r\n    size() {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[this.head]}`;\r\n        for (let i = this.head + 1; i < this.tail; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","import { defaultEquals } from '../util';\nimport LinkedList from './linked-list';\nimport { DoublyNode } from './models/linked-list-models';\n\nexport default class DoublyLinkedList extends LinkedList {\n    constructor(equalsFn = defaultEquals) {\n        super(equalsFn);\n        this.tail = undefined;\n    }\n\n    push(element) {\n        const node = new DoublyNode(element);\n        if (this.head == null) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        this.count++;\n    }\n\n    insert(element, index) {\n        if (index >= 0 && index <= this.count) {\n            const node = new DoublyNode(element);\n            let current = this.head;\n            if (index === 0) {\n                if (this.head == null) {\n                    this.head = node;\n                    this.tail = node;\n                } else {\n                    node.next = this.head;\n                    this.head.prev = node;\n                    this.head = node;\n                }\n            } else if (index === this.count) {\n                current = this.tail;\n                current.next = node;\n                node.prev = current;\n                this.tail = node;\n            } else {\n                const previous = this.getElementAt(index - 1);\n                current = previous.next;\n                node.next = current;\n                previous.next = node;\n                current.prev = node;\n                node.prev = previous;\n            }\n            this.count++;\n            return true;\n        }\n        return false;\n    }\n\n    removeAt(index) {\n        if (index >= 0 && index < this.count) {\n            let current = this.head;\n            if (index === 0) {\n                this.head = this.head.next;\n                if (this.count === 1) {\n                    this.tail = undefined;\n                } else {\n                    this.head.prev = undefined;\n                }\n            } else if (index === this.count - 1) {\n                current = this.tail;\n                this.tail = current.prev;\n                this.tail.next = undefined;\n            } else {\n                current = this.getElementAt(index);\n                const previous = current.prev;\n                previous.next = current.next;\n                current.next.prev = previous;\n            }\n            this.count--;\n            return current.element;\n        }\n        return undefined;\n    }\n\n    indexOf(element) {\n        let current = this.head;\n        let index = 0;\n        while (current != null) {\n            if (this.equalsFn(element, current.element)) {\n                return index;\n            }\n            index++;\n            current = current.next;\n        }\n        return -1;\n    }\n\n    getHead() {\n        return this.head;\n    }\n\n    getTail() {\n        return this.tail;\n    }\n\n    clear() {\n        super.clear();\n        this.tail = undefined;\n    }\n\n    toString() {\n        if (this.head == null) {\n            return '';\n        }\n        let objString = `${this.head.element}`;\n        let current = this.head.next;\n        while (current != null) {\n            objString = `${objString},${current.element}`;\n            current = current.next;\n        }\n        return objString;\n    }\n\n    inverseToString() {\n        if (this.tail == null) {\n            return '';\n        }\n        let objString = `${this.tail.element}`;\n        let previous = this.tail.prev;\n        while (previous != null) {\n            objString = `${objString},${previous.element}`;\n            previous = previous.prev;\n        }\n        return objString;\n    }\n}\n","import { defaultEquals } from '../util';\nimport { Node } from './models/linked-list-models';\n\nexport default class LinkedList {\n    constructor(equalsFn = defaultEquals) {\n        this.equalsFn = equalsFn;\n        this.count = 0; // count用来存储链表中的元素数量\n        this.head = undefined; // 虚拟头节点\n    }\n\n    // 向链表尾部添加一个新元素\n    push(element) {\n        const node = new Node(element);\n        let current;\n        if (this.head == null) {\n            // catches null && undefined\n            this.head = node;\n        } else {\n            current = this.head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = node;\n        }\n        this.count++;\n    }\n\n    // 返回链表中特定位置的元素\n    getElementAt(index) {\n        if (index >= 0 && index <= this.count) {\n            let node = this.head;\n            for (let i = 0; i < index && node != null; i++) {\n                node = node.next;\n            }\n            return node;\n        }\n        return undefined;\n    }\n\n    // 向链表的特定位置插入一个新元素\n    insert(element, index) {\n        if (index >= 0 && index <= this.count) {\n            const node = new Node(element);\n            if (index === 0) {\n                const current = this.head;\n                node.next = current;\n                this.head = node;\n            } else {\n                const previous = this.getElementAt(index - 1);\n                node.next = previous.next;\n                previous.next = node;\n            }\n            this.count++;\n            return true;\n        }\n        return false;\n    }\n\n    // 从链表的特定位置移除一个元素\n    removeAt(index) {\n        if (index >= 0 && index < this.count) {\n            let current = this.head;\n            if (index === 0) {\n                this.head = current.next;\n            } else {\n                const previous = this.getElementAt(index - 1);\n                current = previous.next;\n                previous.next = current.next;\n            }\n            this.count--;\n            return current.element;\n        }\n        return undefined;\n    }\n\n    // 从链表中移除一个元素\n    remove(element) {\n        const index = this.indexOf(element);\n        return this.removeAt(index);\n    }\n\n    // 返回元素在链表中的索引\n    indexOf(element) {\n        let current = this.head;\n        for (let i = 0; i < this.size() && current != null; i++) {\n            if (this.equalsFn(element, current.element)) {\n                return i;\n            }\n            current = current.next;\n        }\n        return -1;\n    }\n\n    // 判空\n    isEmpty() {\n        return this.size() === 0;\n    }\n\n    // 返回链表包含的元素个数\n    size() {\n        return this.count;\n    }\n\n    // 获取链表的头节点\n    getHead() {\n        return this.head;\n    }\n\n    // 清空\n    clear() {\n        this.head = undefined;\n        this.count = 0;\n    }\n\n    // 输出\n    toString() {\n        if (this.head == null) {\n            return '';\n        }\n        let objString = `${this.head.element}`;\n        let current = this.head.next;\n        for (let i = 1; i < this.size() && current != null; i++) {\n            objString = `${objString},${current.element}`;\n            current = current.next;\n        }\n        return objString;\n    }\n}\n","export class Node {\n    constructor(element, next) {\n        this.element = element;\n        this.next = next;\n    }\n}\n\nexport class DoublyNode extends Node {\n    constructor(element, next, prev) {\n        super(element, next);\n        this.prev = prev;\n    }\n}\n","// @ts-check\r\n\r\nexport default class Queue {\r\n    constructor() {\r\n        this.head = 0; // 队列的头指针\r\n        this.tail = 0; // 队列的尾指针，通常情况下指向队列最后一个元素的下一位\r\n        this.items = {};\r\n    }\r\n\r\n    // 入队\r\n    enqueue(element) {\r\n        this.items[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    // 出队\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        const result = this.items[this.head];\r\n        delete this.items[this.head];\r\n        this.head++;\r\n        return result;\r\n    }\r\n\r\n    // 查看队首元素\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.head];\r\n    }\r\n\r\n    // 判空\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    // 清空\r\n    clear() {\r\n        this.items = {};\r\n        this.head = 0;\r\n        this.tail = 0;\r\n    }\r\n\r\n    // 队列元素个数\r\n    size() {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[this.head]}`;\r\n        for (let i = this.head + 1; i < this.tail; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","// @ts-check\r\n\r\n// 基于数组的栈\r\nexport default class StackArray {\r\n    constructor() {\r\n        this.items = []; // 使用数组来保存栈里的元素\r\n    }\r\n\r\n    push(element) { // 向栈添加元素\r\n        this.items.push(element);\r\n    }\r\n\r\n    pop() { // 从栈移除元素\r\n        return this.items.pop();\r\n    }\r\n\r\n    peek() { // 查看栈顶元素\r\n        return this.items[this.items.length - 1];\r\n    }\r\n\r\n    isEmpty() { // 检查栈是否为空\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    size() { // 返回栈里的所有元素\r\n        return this.items.length;\r\n    }\r\n\r\n    clear() { // 清空栈元素\r\n        this.items = [];\r\n    }\r\n\r\n    toArray() {\r\n        return this.items;\r\n    }\r\n\r\n    toString() { // 打印栈内容\r\n        return this.items.toString();\r\n    }\r\n}\r\n","// @ts-check\r\n\r\n// 创建一个基于JavaScript对象的Stack类\r\nexport default class Stack {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.items = {};\r\n    }\r\n\r\n    push(element) {\r\n        this.items[this.count] = element;\r\n        this.count++;\r\n    }\r\n\r\n    pop() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        this.count--;\r\n        const result = this.items[this.count];\r\n        delete this.items[this.count]\r\n        return result;\r\n    }\r\n\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.count - 1];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.count === 0;\r\n    }\r\n\r\n    size() {\r\n        return this.count;\r\n    }\r\n\r\n    clear() {\r\n        /* while (!this.isEmpty()) {\r\n            this.pop();\r\n        } */\r\n        this.items = {};\r\n        this.count = 0;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[0]}`;\r\n        for (let i = 1; i < this.count; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","// chapter 04\nexport { default as StackArray } from './data-structures/stack-array';\nexport { default as Stack } from './data-structures/stack';\nexport { decimalToBinary } from './others/base-converter';\n\n// chapter 05\nexport { default as Queue } from './data-structures/queue';\nexport { default as Deque } from './data-structures/deque';\nexport { hotPotato } from './others/hot-potato';\nexport { palindromeChecker } from './others/palindrome-checker';\n\n// chapter 06\nexport { default as LinkedList } from './data-structures/linked-list';\nexport { default as DoublyLinkedList } from './data-structures/doubly-linked-list';\n","// @ts-check\r\n\r\nimport Stack from '../data-structures/stack-array';\r\n\r\n// 十进制转二进制\r\nexport function decimalToBinary(decNumber) {\r\n    const remStack = new Stack(); // remStack用来存储余数\r\n    let number = decNumber;\r\n    let rem;\r\n    let binaryString = ''; // 最终返回的二进制字符串\r\n\r\n    // 当除法运算的结果不为0时，我们会得到一个余数，并压入栈中。然后让结果继续除以2\r\n    while (number > 0) {\r\n        rem = Math.floor(number % 2);\r\n        remStack.push(rem);\r\n        number = Math.floor(number / 2);\r\n    }\r\n\r\n    // 将栈中元素依次弹栈，并输出\r\n    while (!remStack.isEmpty()) {\r\n        binaryString += remStack.pop().toString();\r\n    }\r\n\r\n    return binaryString;\r\n}\r\n","import Queue from '../data-structures/queue';\n\n/**\n * 循环队列——模拟击鼓传花游戏\n * @param {*} elementList 人员列表\n * @param {*} num 传递次数\n */\nexport function hotPotato(elementList, num) {\n    const queue = new Queue();\n    const eliminatedList = []; // 存储被淘汰的人员\n    // 依次入队elementList\n    for (let i = 0; i < elementList.length; i++) {\n        queue.enqueue(elementList[i]);\n    }\n\n    while (queue.size() > 1) {\n        for (let i = 0; i < num; i++) {\n            queue.enqueue(queue.dequeue());\n        }\n        eliminatedList.push(queue.dequeue());\n    }\n\n    return {\n        eliminated: eliminatedList,\n        winner: queue.dequeue()\n    };\n}\n","/**\n * 回文检查器\n */\n\nimport Deque from '../data-structures/deque';\n\nexport function palindromeChecker(aString) {\n    if (aString === undefined || aString === null || (aString !== null && aString.length === 0)) {\n        return false;\n    }\n    const deque = new Deque();\n    const lowerString = aString.toLocaleLowerCase().split(' ').join('');\n    let firstChar;\n    let lastChar;\n\n    for (let i = 0; i < lowerString.length; i++) {\n        deque.addBack(lowerString.charAt(i));\n    }\n\n    while (deque.size() > 1) {\n        firstChar = deque.removeFront();\n        lastChar = deque.removeBack();\n        if (firstChar !== lastChar) {\n            return false;\n        }\n    }\n    return true;\n}\n","export function defaultEquals(a, b) {\n    return a === b;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(126);\n"],"sourceRoot":""}