{"version":3,"sources":["webpack://DataStructuresAlgorithms/./src/js/data-structures/circular-linked-list.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/deque.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/doubly-linked-list.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/linked-list.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/models/linked-list-models.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/queue.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/sorted-linked-list.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/stack-array.js","webpack://DataStructuresAlgorithms/./src/js/data-structures/stack.js","webpack://DataStructuresAlgorithms/./src/js/index.js","webpack://DataStructuresAlgorithms/./src/js/others/base-converter.js","webpack://DataStructuresAlgorithms/./src/js/others/hot-potato.js","webpack://DataStructuresAlgorithms/./src/js/others/palindrome-checker.js","webpack://DataStructuresAlgorithms/./src/js/util.js","webpack://DataStructuresAlgorithms/webpack/bootstrap","webpack://DataStructuresAlgorithms/webpack/startup"],"names":["CircularLinkedList","equalsFn","defaultEquals","push","element","node","Node","current","this","head","getElementAt","size","next","count","insert","index","previous","removeAt","undefined","removed","LinkedList","Deque","tail","items","addFront","isEmpty","addBack","i","removeFront","result","removeBack","peekFront","peekBack","clear","toString","objString","DoublyLinkedList","DoublyNode","prev","indexOf","getHead","getTail","inverseToString","remove","Queue","enqueue","dequeue","peek","SortedLinkedList","compareFn","defaultCompare","getIndexNextSortedElement","pos","comp","Compare","LESS_THAN","StackArray","pop","length","toArray","Stack","default","decimalToBinary","hotPotato","palindromeChecker","_util","util","decNumber","remStack","number","rem","binaryString","Math","floor","elementList","num","queue","eliminatedList","eliminated","winner","aString","deque","lowerString","toLocaleLowerCase","split","join","firstChar","lastChar","charAt","BIGGER_THAN","EQUALS","a","b","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call"],"mappings":"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","file":"DataStructuresAlgorithms.min.js","sourcesContent":["/**\n * 循环链表和链表之间的唯一区别在于，最后一个元素指向下一个元素的指针不是引用undefined,而是指向第一个元素（head）\n */\n\nimport { defaultEquals } from '../util';\nimport LinkedList from './linked-list';\nimport { Node } from './models/linked-list-models';\n\nexport default class CircularLinkedList extends LinkedList {\n    constructor(equalsFn = defaultEquals) {\n        super(equalsFn);\n    }\n\n    push(element) {\n        const node = new Node(element);\n        let current;\n        if (this.head == null) {\n            // 向空链表尾部追加节点\n            this.head = node;\n        } else {\n            // 向非空链表尾部追加节点\n            current = this.getElementAt(this.size() - 1);\n            current.next = node;\n        }\n        node.next = this.head;\n        this.count++;\n    }\n\n    insert(element, index) {\n        if (index >= 0 && index < this.count) {\n            const node = new Node(element);\n            let current = this.head;\n            if (index === 0) {\n                if (this.head == null) {\n                    this.head = node;\n                    node.next = this.head;\n                } else {\n                    node.next = current;\n                    current = this.getElementAt(this.size() - 1);\n                    this.head = node;\n                    current.next = this.head;\n                }\n            } else {\n                const previous = this.getElementAt(index - 1);\n                node.next = previous.next;\n                previous.next = node;\n            }\n            this.count++;\n            return true;\n        }\n        return false;\n    }\n\n    removeAt(index) {\n        if (index >= 0 && index < this.count) {\n            let current = this.head;\n            if (index === 0) {\n                if (this.size() === 1) {\n                    // 从只有一个元素的循环链表中移除一个元素\n                    this.head = undefined;\n                } else {\n                    // 从一个非空循环链表中移除第一个元素\n                    const removed = this.head; // 保存当前head元素的引用\n                    current = this.getElementAt(this.size() - 1);\n                    this.head = this.head.next;\n                    current.next = this.head;\n                    current = removed; // current指向被移除的元素\n                }\n            } else {\n                const previous = this.getElementAt(index - 1);\n                current = previous.next;\n                previous.next = current.next;\n            }\n            this.count--;\n            return current.element;\n        }\n        return undefined;\n    }\n}\n","/**\r\n * 双端队列（deque, 或称double-ended queue）是一种允许我们同时从队首和队尾添加和删除元素的特殊队列\r\n */\r\n\r\nexport default class Deque {\r\n    constructor() {\r\n        this.head = 0;\r\n        this.tail = 0;\r\n        this.items = {};\r\n    }\r\n\r\n    // 向双端队列头部添加元素\r\n    addFront(element) {\r\n        if (this.isEmpty()) {\r\n            this.addBack(element);\r\n        } else if (this.head > 0) {\r\n            this.head--;\r\n            this.items[this.head] = element;\r\n        } else {\r\n            for (let i = this.tail; i > 0; i--) {\r\n                this.items[i] = this.items[i - 1];\r\n            }\r\n        }\r\n    }\r\n\r\n    // 向双端队列尾部添加元素\r\n    addBack(element) {\r\n        this.items[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    // 向双端队列头部移除元素\r\n    removeFront() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        const result = this.items[this.head];\r\n        delete this.items[this.head];\r\n        this.head++;\r\n        return result;\r\n    }\r\n\r\n    // 向双端队列尾部移除元素\r\n    removeBack() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        this.tail--;\r\n        const result = this.items[this.tail];\r\n        delete this.items[this.tail];\r\n        return result;\r\n    }\r\n\r\n    peekFront() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.head];\r\n    }\r\n\r\n    peekBack() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.tail - 1];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.items = {};\r\n        this.head = 0;\r\n        this.tail = 0;\r\n    }\r\n\r\n    size() {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[this.head]}`;\r\n        for (let i = this.head + 1; i < this.tail; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","import { defaultEquals } from '../util';\nimport LinkedList from './linked-list';\nimport { DoublyNode } from './models/linked-list-models';\n\nexport default class DoublyLinkedList extends LinkedList {\n    // 扩展LinkedList类\n    constructor(equalsFn = defaultEquals) {\n        super(equalsFn);\n        this.tail = undefined; // 尾指针（链表最后一个元素的引用）\n    }\n\n    push(element) {\n        const node = new DoublyNode(element);\n        if (this.head == null) {\n            this.head = node;\n            this.tail = node;\n        } else {\n            this.tail.next = node;\n            node.prev = this.tail;\n            this.tail = node;\n        }\n        this.count++;\n    }\n\n    insert(element, index) {\n        if (index >= 0 && index <= this.count) {\n            const node = new DoublyNode(element);\n            let current = this.head;\n            if (index === 0) {\n                if (this.head == null) {\n                    // 如果双向链表为空，只需要把head和tail都指向新节点即可\n                    this.head = node;\n                    this.tail = node;\n                } else {\n                    node.next = this.head;\n                    this.head.prev = node;\n                    this.head = node;\n                }\n            } else if (index === this.count) {\n                // 在双向链表最后添加一个元素\n                current = this.tail;\n                current.next = node;\n                node.prev = current;\n                this.tail = node;\n            } else {\n                const previous = this.getElementAt(index - 1);\n                current = previous.next;\n                node.next = current;\n                previous.next = node;\n                current.prev = node;\n                node.prev = previous;\n            }\n            this.count++;\n            return true;\n        }\n        return false;\n    }\n\n    removeAt(index) {\n        if (index >= 0 && index < this.count) {\n            let current = this.head;\n            if (index === 0) {\n                // 从头部移除一个元素\n                this.head = this.head.next;\n                if (this.count === 1) {\n                    this.tail = undefined;\n                } else {\n                    this.head.prev = undefined;\n                }\n            } else if (index === this.count - 1) {\n                // 从尾部移除一个元素\n                current = this.tail;\n                this.tail = current.prev;\n                this.tail.next = undefined;\n            } else {\n                // 从中间移除一个元素\n                current = this.getElementAt(index);\n                const previous = current.prev;\n                previous.next = current.next;\n                current.next.prev = previous;\n            }\n            this.count--;\n            return current.element;\n        }\n        return undefined;\n    }\n\n    indexOf(element) {\n        let current = this.head;\n        let index = 0;\n        while (current != null) {\n            if (this.equalsFn(element, current.element)) {\n                return index;\n            }\n            index++;\n            current = current.next;\n        }\n        return -1;\n    }\n\n    getHead() {\n        return this.head;\n    }\n\n    getTail() {\n        return this.tail;\n    }\n\n    clear() {\n        super.clear();\n        this.tail = undefined;\n    }\n\n    toString() {\n        if (this.head == null) {\n            return '';\n        }\n        let objString = `${this.head.element}`;\n        let current = this.head.next;\n        while (current != null) {\n            objString = `${objString},${current.element}`;\n            current = current.next;\n        }\n        return objString;\n    }\n\n    inverseToString() {\n        if (this.tail == null) {\n            return '';\n        }\n        let objString = `${this.tail.element}`;\n        let previous = this.tail.prev;\n        while (previous != null) {\n            objString = `${objString},${previous.element}`;\n            previous = previous.prev;\n        }\n        return objString;\n    }\n}\n","import { defaultEquals } from '../util';\nimport { Node } from './models/linked-list-models';\n\nexport default class LinkedList {\n    constructor(equalsFn = defaultEquals) {\n        this.equalsFn = equalsFn;\n        this.count = 0; // count用来存储链表中的元素数量\n        this.head = undefined; // 虚拟头节点\n    }\n\n    // 向链表尾部添加一个新元素\n    push(element) {\n        const node = new Node(element);\n        let current;\n        if (this.head == null) {\n            // 向空链表添加一个元素\n            this.head = node;\n        } else {\n            current = this.head;\n            while (current.next != null) {\n                // 获取最后一项\n                current = current.next;\n            }\n            current.next = node; // 让当前元素的next指针指向要添加到链表的节点\n        }\n        this.count++;\n    }\n\n    // 返回链表中特定位置的元素\n    getElementAt(index) {\n        if (index >= 0 && index <= this.count) {\n            let node = this.head;\n            for (let i = 0; i < index && node != null; i++) {\n                node = node.next;\n            }\n            return node;\n        }\n        return undefined;\n    }\n\n    // 向链表的特定位置插入一个新元素\n    insert(element, index) {\n        if (index >= 0 && index <= this.count) {\n            const node = new Node(element);\n            if (index === 0) {\n                const current = this.head;\n                node.next = current;\n                this.head = node;\n            } else {\n                const previous = this.getElementAt(index - 1);\n                node.next = previous.next;\n                previous.next = node;\n            }\n            this.count++;\n            return true;\n        }\n        return false;\n    }\n\n    // 从链表的特定位置移除一个元素\n    removeAt(index) {\n        // 检查越界值\n        if (index >= 0 && index < this.count) {\n            let current = this.head;\n            if (index === 0) {\n                // 移除第一项\n                this.head = current.next;\n            } else {\n                // 移除其他项只需将previous.next指向current.next\n                const previous = this.getElementAt(index - 1);\n                current = previous.next;\n                previous.next = current.next;\n            }\n            this.count--;\n            return current.element;\n        }\n        return undefined; // 如果不是有效的位置，直接return undefined\n    }\n\n    // 从链表中移除一个元素\n    remove(element) {\n        const index = this.indexOf(element);\n        return this.removeAt(index);\n    }\n\n    // 返回元素在链表中的索引\n    indexOf(element) {\n        let current = this.head;\n        for (let i = 0; i < this.size() && current != null; i++) {\n            if (this.equalsFn(element, current.element)) {\n                return i;\n            }\n            current = current.next;\n        }\n        return -1;\n    }\n\n    // 判空\n    isEmpty() {\n        return this.size() === 0;\n    }\n\n    // 返回链表包含的元素个数\n    size() {\n        return this.count;\n    }\n\n    // 获取链表的头节点\n    getHead() {\n        return this.head;\n    }\n\n    // 清空\n    clear() {\n        this.head = undefined;\n        this.count = 0;\n    }\n\n    // 输出\n    toString() {\n        if (this.head == null) {\n            return '';\n        }\n        let objString = `${this.head.element}`;\n        let current = this.head.next;\n        for (let i = 1; i < this.size() && current != null; i++) {\n            objString = `${objString},${current.element}`;\n            current = current.next;\n        }\n        return objString;\n    }\n}\n","export class Node {\n    constructor(element, next) {\n        this.element = element;\n        this.next = next;\n    }\n}\n\nexport class DoublyNode extends Node {\n    constructor(element, next, prev) {\n        super(element, next);\n        this.prev = prev;\n    }\n}\n","// @ts-check\r\n\r\nexport default class Queue {\r\n    constructor() {\r\n        this.head = 0; // 队列的头指针\r\n        this.tail = 0; // 队列的尾指针，通常情况下指向队列最后一个元素的下一位\r\n        this.items = {};\r\n    }\r\n\r\n    // 入队\r\n    enqueue(element) {\r\n        this.items[this.tail] = element;\r\n        this.tail++;\r\n    }\r\n\r\n    // 出队\r\n    dequeue() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        const result = this.items[this.head];\r\n        delete this.items[this.head];\r\n        this.head++;\r\n        return result;\r\n    }\r\n\r\n    // 查看队首元素\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.head];\r\n    }\r\n\r\n    // 判空\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n\r\n    // 清空\r\n    clear() {\r\n        this.items = {};\r\n        this.head = 0;\r\n        this.tail = 0;\r\n    }\r\n\r\n    // 队列元素个数\r\n    size() {\r\n        return this.tail - this.head;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[this.head]}`;\r\n        for (let i = this.head + 1; i < this.tail; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","import { Compare, defaultCompare, defaultEquals } from '../util';\nimport LinkedList from './linked-list';\n\nexport default class SortedLinkedList extends LinkedList {\n    constructor(equalsFn = defaultEquals, compareFn = defaultCompare) {\n        super(equalsFn);\n        this.equalsFn = equalsFn;\n        this.compareFn = compareFn;\n    }\n\n    push(element) {\n        if (this.isEmpty()) {\n            super.push(element);\n        } else {\n            const index = this.getIndexNextSortedElement(element);\n            super.insert(element, index);\n        }\n    }\n\n    insert(element, index = 0) {\n        if (this.isEmpty()) {\n            return super.insert(element, index === 0 ? index : 0);\n        }\n        const pos = this.getIndexNextSortedElement(element);\n        return super.insert(element, pos);\n    }\n\n    getIndexNextSortedElement(element) {\n        let current = this.head;\n        let i = 0;\n        for (; i < this.size() && current; i++) {\n            const comp = this.compareFn(element, current.element);\n            if (comp === Compare.LESS_THAN) {\n                return i;\n            }\n            current = current.next;\n        }\n        return i;\n    }\n}\n","// @ts-check\r\n\r\n// 基于数组的栈\r\nexport default class StackArray {\r\n    constructor() {\r\n        this.items = []; // 使用数组来保存栈里的元素\r\n    }\r\n\r\n    push(element) { // 向栈添加元素\r\n        this.items.push(element);\r\n    }\r\n\r\n    pop() { // 从栈移除元素\r\n        return this.items.pop();\r\n    }\r\n\r\n    peek() { // 查看栈顶元素\r\n        return this.items[this.items.length - 1];\r\n    }\r\n\r\n    isEmpty() { // 检查栈是否为空\r\n        return this.items.length === 0;\r\n    }\r\n\r\n    size() { // 返回栈里的所有元素\r\n        return this.items.length;\r\n    }\r\n\r\n    clear() { // 清空栈元素\r\n        this.items = [];\r\n    }\r\n\r\n    toArray() {\r\n        return this.items;\r\n    }\r\n\r\n    toString() { // 打印栈内容\r\n        return this.items.toString();\r\n    }\r\n}\r\n","// @ts-check\r\n\r\n// 创建一个基于JavaScript对象的Stack类\r\nexport default class Stack {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.items = {};\r\n    }\r\n\r\n    push(element) {\r\n        this.items[this.count] = element;\r\n        this.count++;\r\n    }\r\n\r\n    pop() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        this.count--;\r\n        const result = this.items[this.count];\r\n        delete this.items[this.count]\r\n        return result;\r\n    }\r\n\r\n    peek() {\r\n        if (this.isEmpty()) {\r\n            return undefined;\r\n        }\r\n        return this.items[this.count - 1];\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.count === 0;\r\n    }\r\n\r\n    size() {\r\n        return this.count;\r\n    }\r\n\r\n    clear() {\r\n        /* while (!this.isEmpty()) {\r\n            this.pop();\r\n        } */\r\n        this.items = {};\r\n        this.count = 0;\r\n    }\r\n\r\n    toString() {\r\n        if (this.isEmpty()) {\r\n            return '';\r\n        }\r\n        let objString = `${this.items[0]}`;\r\n        for (let i = 1; i < this.count; i++) {\r\n            objString = `${objString},${this.items[i]}`;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\n","import * as _util from './util';\n\nexport const util = _util;\n\n// chapter 04\nexport { default as StackArray } from './data-structures/stack-array';\nexport { default as Stack } from './data-structures/stack';\nexport { decimalToBinary } from './others/base-converter';\n\n// chapter 05\nexport { default as Queue } from './data-structures/queue';\nexport { default as Deque } from './data-structures/deque';\nexport { hotPotato } from './others/hot-potato';\nexport { palindromeChecker } from './others/palindrome-checker';\n\n// chapter 06\nexport { default as LinkedList } from './data-structures/linked-list';\nexport { default as DoublyLinkedList } from './data-structures/doubly-linked-list';\nexport { default as CircularLinkedList } from './data-structures/circular-linked-list';\nexport { default as SortedLinkedList } from './data-structures/sorted-linked-list';\n","// @ts-check\r\n\r\nimport Stack from '../data-structures/stack-array';\r\n\r\n// 十进制转二进制\r\nexport function decimalToBinary(decNumber) {\r\n    const remStack = new Stack(); // remStack用来存储余数\r\n    let number = decNumber;\r\n    let rem;\r\n    let binaryString = ''; // 最终返回的二进制字符串\r\n\r\n    // 当除法运算的结果不为0时，我们会得到一个余数，并压入栈中。然后让结果继续除以2\r\n    while (number > 0) {\r\n        rem = Math.floor(number % 2);\r\n        remStack.push(rem);\r\n        number = Math.floor(number / 2);\r\n    }\r\n\r\n    // 将栈中元素依次弹栈，并输出\r\n    while (!remStack.isEmpty()) {\r\n        binaryString += remStack.pop().toString();\r\n    }\r\n\r\n    return binaryString;\r\n}\r\n","import Queue from '../data-structures/queue';\n\n/**\n * 循环队列——模拟击鼓传花游戏\n * @param {*} elementList 人员列表\n * @param {*} num 传递次数\n */\nexport function hotPotato(elementList, num) {\n    const queue = new Queue();\n    const eliminatedList = []; // 存储被淘汰的人员\n    // 依次入队elementList\n    for (let i = 0; i < elementList.length; i++) {\n        queue.enqueue(elementList[i]);\n    }\n\n    while (queue.size() > 1) {\n        for (let i = 0; i < num; i++) {\n            queue.enqueue(queue.dequeue());\n        }\n        eliminatedList.push(queue.dequeue());\n    }\n\n    return {\n        eliminated: eliminatedList,\n        winner: queue.dequeue()\n    };\n}\n","/**\n * 回文检查器\n */\n\nimport Deque from '../data-structures/deque';\n\nexport function palindromeChecker(aString) {\n    if (aString === undefined || aString === null || (aString !== null && aString.length === 0)) {\n        return false;\n    }\n    const deque = new Deque();\n    const lowerString = aString.toLocaleLowerCase().split(' ').join('');\n    let firstChar;\n    let lastChar;\n\n    for (let i = 0; i < lowerString.length; i++) {\n        deque.addBack(lowerString.charAt(i));\n    }\n\n    while (deque.size() > 1) {\n        firstChar = deque.removeFront();\n        lastChar = deque.removeBack();\n        if (firstChar !== lastChar) {\n            return false;\n        }\n    }\n    return true;\n}\n","export const Compare = {\n    LESS_THAN: -1,\n    BIGGER_THAN: 1,\n    EQUALS: 0\n};\n\nexport function defaultEquals(a, b) {\n    return a === b;\n}\n\nexport function defaultCompare(a, b) {\n    if (a === b) {\n        return Compare.EQUALS;\n    }\n    return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(126);\n"],"sourceRoot":""}